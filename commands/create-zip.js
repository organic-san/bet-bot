const guild = require('../functions/guildInfo');
const fs = require('fs');
const Discord = require('discord.js');
const JSZip = require('jszip');

module.exports = {
    data: new Discord.SlashCommandBuilder()
        .setName('create-zip')
        .setDescription('Âª∫Á´ãË≥áÊñôÂÇô‰ªΩ(Áî±ÁÆ°ÁêÜÂì°ÊìçÊéß)'),

    tag: "guildInfo",

    /**
     * 
     * @param {Discord.CommandInteraction} interaction 
     * @param {guild.guildInformation} guildInformation
     */
    async execute(interaction, guildInformation) {
        //Ê¨äÈôê
        if (!interaction.member.permissions.has(Discord.PermissionsBitField.Flags.ManageMessages)) {
            return interaction.reply({ content: "Ê≠§Êåá‰ª§ÂÉÖÈôêÁÆ°ÁêÜÂì°‰ΩøÁî®„ÄÇ", ephemeral: true });
        }

        await interaction.deferReply();

        const folderPath = './data/guildData/' + interaction.guildId;

        const zip = new JSZip();

        // Âª∫Á´ãË≥áÊñôÂ§æ
        function addFolderToZip(folderPath, zip, currentPath = '') {
            const files = fs.readdirSync(folderPath);

            files.forEach(file => {
                const filePath = `${folderPath}/${file}`;
                const stats = fs.statSync(filePath);

                if (stats.isDirectory()) {
                    addFolderToZip(filePath, zip, `${currentPath}${file}/`);
                } else {
                    const content = fs.readFileSync(filePath);
                    zip.file(`${currentPath}${file}`, content);
                }
            });
        }

        // Â∞ÜÊñá‰ª∂Â§πÊ∑ªÂä†Âà∞ zip ‰∏≠
        addFolderToZip(folderPath, zip);

        // ÁîüÊàê zip Êñá‰ª∂
        new Promise((resolve, reject) => {
            zip.generateNodeStream({ type: 'nodebuffer', streamFiles: true })
                .pipe(fs.createWriteStream(`./data/guildData/${interaction.guildId}.zip`))
                .on('finish', () => {
                    resolve();
                })
                .on('error', (err) => {
                    reject(err);
                });
        }).then(() => {
            interaction.editReply({ content: `Ë≥áÊñôÂÇô‰ªΩÂ∑≤Âª∫Á´ãÔºåË´ãÈªûÊìä‰∏ãÊñπÈÄ£Áµê‰∏ãËºâ„ÄÇ`, files: [`./data/guildData/${interaction.guildId}.zip`] });
        }).catch((err) => {
            interaction.editReply({ content: `Ë≥áÊñôÂÇô‰ªΩÂª∫Á´ãÂ§±ÊïóÔºåÈåØË™§Ë®äÊÅØ: ${err}` });
        });

    }
}

/**
 * 
 * @param {guild.betTemplateObject} template 
 * @param {Discord.CommandInteraction} interaction 
 */
function templateEmbed(template, interaction) {
    const embed = new Discord.EmbedBuilder()
        .setColor(process.env.EMBEDCOLOR)
        .setTitle(`Ê®°Êùø: ${template.name} È†êË¶Ω`)
        .setDescription(template.description)
        .setTimestamp()
        .setFooter({
            text: `${interaction.client.user.tag}`,
            iconURL: interaction.client.user.displayAvatarURL({ dynamic: true })
        });

    template.option.forEach((ele, ind) => {
        embed.addFields({ name: "üìî " + (ind + 1) + ". " + ele.name, value: ele.description });
    })

    return embed;
}

/**
 * 
 * @param {number} length 
 */
function buttomComponent(length) {
    const row = new Discord.ActionRowBuilder()
        .addComponents(
            [
                new Discord.ButtonBuilder()
                    .setCustomId('add')
                    .setLabel('Ê∑ªÂä†ÈÅ∏È†Ö')
                    .setStyle(Discord.ButtonStyle.Primary)
                    .setDisabled(length > 20),
                new Discord.ButtonBuilder()
                    .setCustomId('multiadd')
                    .setLabel('ÊâπÊ¨°Ê∑ªÂä†ÈÅ∏È†Ö')
                    .setStyle(Discord.ButtonStyle.Primary)
                    .setDisabled(length > 20),
                new Discord.ButtonBuilder()
                    .setCustomId('remove')
                    .setLabel('ÁßªÈô§ÈÅ∏È†Ö')
                    .setStyle(Discord.ButtonStyle.Danger)
                    .setDisabled(length < 1),
                new Discord.ButtonBuilder()
                    .setCustomId('complete')
                    .setLabel('Ë®≠ÂÆöÂÆåÊàê')
                    .setStyle(Discord.ButtonStyle.Success)
                    .setDisabled(length < 2),
            ]
        );
    return row;
}

function CompleteButtomComponent() {
    const row = new Discord.ActionRowBuilder()
        .addComponents(
            [
                new Discord.ButtonBuilder()
                    .setCustomId('checked')
                    .setLabel('Á¢∫Ë™çÊñ∞Â¢ûÊ®°Êùø')
                    .setStyle(Discord.ButtonStyle.Success),
                new Discord.ButtonBuilder()
                    .setCustomId('cancel')
                    .setLabel('ÂèñÊ∂àÁ¢∫Ë™çÔºåÁπºÁ∫åË®≠ÂÆö')
                    .setStyle(Discord.ButtonStyle.Primary),
            ]
        );
    return row;
}